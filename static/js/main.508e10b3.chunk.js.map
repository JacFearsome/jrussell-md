{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["converter","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","ghCompatibleHeaderId","setFlavor","App","props","handleFileRead","e","content","fileReader","result","setState","file","handleFileChosen","files","FileReader","onloadend","filename","name","readAsText","onChange","newValue","handleOpen","isOpen","handleClose","onFilesError","error","console","log","code","message","setSelectedTab","state","selectedTab","saveFile","blob","Blob","type","saveAs","bind","editor","Group","align","Alignment","LEFT","Heading","Divider","onClick","this","className","icon","text","onError","accepts","maxFiles","maxFileSize","minFileSize","clickable","onClose","title","Classes","DRAWER_BODY","DIALOG_BODY","source","DRAWER_FOOTER","value","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.508e10b3.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport {\n    Alignment,\n    Button,\n    Classes,\n    Code,\n    Divider,\n    Drawer,\n    Label,\n    Position,\n    Switch,\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading,\n    FileInput,\n} from \"@blueprintjs/core\";\nimport { saveAs } from 'file-saver';\nimport Files from 'react-files'\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport 'github-markdown-css/github-markdown.css';\n\nconst converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true,\n    ghCompatibleHeaderId: true,\n});\nconverter.setFlavor('github');\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            file: \"\",\n            isOpen: false,\n            selectedTab: \"write\",\n            filename: \"file.md\",\n        }\n        this.handleOpen = this.handleOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    fileReader;\n\n    handleFileRead = (e) => {\n        const content = this.fileReader.result;\n        this.setState({ file: content });\n    };\n\n    handleFileChosen = (files) => {\n        let file = files[0];\n        this.fileReader = new FileReader();\n        this.fileReader.onloadend = this.handleFileRead;\n        this.setState({ filename: file.name })\n        this.fileReader.readAsText(file);\n    };\n\n    onLoad(editor) {\n        console.log(\"Ace editor loaded...\");\n    }\n\n    onChange = (newValue) => {\n        this.setState({ file: newValue });\n    }\n\n    handleOpen = () => {\n        this.setState({ isOpen: true });\n    }\n\n    handleClose = () => {\n        this.setState({ isOpen: false });\n    }\n    \n    onFilesError = (error, file) => {\n        console.log('error code ' + error.code + ': ' + error.message)\n    }\n\n    setSelectedTab = () => {\n        if (this.state.selectedTab == \"write\") {\n            this.setState({selectedTab: \"preview\"})\n        } else {\n            this.setState({selectedTab: \"write\"})\n        }\n    }\n    saveFile = () => {\n        let blob = new Blob([this.state.file], {type: \"text/plain;charset=utf-8\"});\n        saveAs(blob, this.state.filename);\n    }\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>Markdown Editor</Navbar.Heading>\n                        <Navbar.Divider />\n                        <Button onClick={this.handleOpen} className=\"bp3-minimal\" icon=\"document-open\" text=\"GitHub Preview\" />\n                        <Button className=\"bp3-minimal\" icon=\"upload\" text=\"\"><Files\n                            className='files-dropzone'\n                            onChange={this.handleFileChosen}\n                            onError={this.onFilesError}\n                            accepts={['.md']}\n                            maxFiles={1}\n                            maxFileSize={10000000}\n                            minFileSize={0}\n                            clickable\n                        >Load Local File</Files></Button>\n                        <Button onClick={this.saveFile} className=\"bp3-minimal\" icon=\"floppy-disk\" text=\"Save Local File\" />\n                    </Navbar.Group>\n                </Navbar>\n                <Drawer\n                    icon=\"document\"\n                    onClose={this.handleClose}\n                    title=\"GitHub Preview\"\n                    isOpen={this.state.isOpen}\n                >\n                    <div className={Classes.DRAWER_BODY}>\n                        <div className={Classes.DIALOG_BODY}>\n                            <ReactMarkdown className=\"markdown-body\" source={this.state.file} />\n                        </div>\n                    </div>\n                    <div className={Classes.DRAWER_FOOTER}></div>\n                </Drawer>\n                <ReactMde\n                    value={this.state.file}\n                    onChange={this.onChange}\n                    selectedTab={this.state.selectedTab}\n                    onTabChange={this.setSelectedTab}\n                    generateMarkdownPreview={markdown =>\n                      Promise.resolve(converter.makeHtml(markdown))\n                    }\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}